<?xml version="1.0" encoding="UTF-8"?>
<actor
        xmlns="https://example.org/istar-rl"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="https://example.org/istar-rl ../xsd/istar-rl-schema.xsd"
        name="Manufacturer">
    <predicates>
        <!--  Each predicate is wrapped inside an effect, content inside predicate is variable/identifier-->
        <predicate primitive="true" init="false" exported="false"
                   description="Materials delivered on time (domestic)">
            deliveredInTimeDom
        </predicate>

        <predicate primitive="true" init="false" exported="false"
                   description="Materials delivered late (domestic)">
            deliveredLateDom
        </predicate>

        <predicate primitive="true" init="false" exported="false"
                   description="Materials never delivered (domestic)">
            neverDeliveredDom
        </predicate>

        <predicate primitive="true" init="false" exported="false"
                   description="Materials delivered on time (foreign)">
            deliveredInTimeFrgn
        </predicate>

        <predicate primitive="true" init="false" exported="false"
                   description="Materials delivered late (foreign)">
            deliveredLateFrgn
        </predicate>

        <predicate primitive="true" init="false" exported="false"
                   description="Materials never delivered (foreign)">
            neverDeliveredFrgn
        </predicate>

        <predicate primitive="true" init="false" exported="false"
                   description="In-house build with good quality">
            deliveredGoodQualityInH
        </predicate>

        <predicate primitive="true" init="false" exported="false"
                   description="In-house build with bad quality">
            deliveredBadQualityInH
        </predicate>

        <predicate primitive="true" init="false" exported="false"
                   description="Specialists produce good quality">
            deliveredGoodQualitySpec
        </predicate>

        <predicate primitive="true" init="false" exported="false"
                   description="Specialists produce bad quality">
            deliveredBadQualitySpec
        </predicate>
    </predicates>


    <!-- Validation
            1. Every atom in the boolean expression must be declared as a predicate
    -->
    <preBoxes>
        <preBox name="materialAvailable" description="Material availability in stock">
            [boolean exp here grounded on predicates declared above string for now]
            <!-- <and><atom>conj1</atom><atom>conj2</atom></and> -->
        </preBox>

        <preBox name="hasManufacturingCapacity" description="Manufacturer has capacity to build in-house">
            [boolean exp here grounded on predicates declared above string for now]
        </preBox>
    </preBoxes>



    <!-- Validation
            Every atom in the numeric expression must be declared as a predicate or other quality
    -->
    <qualities>
        <quality name="Reputation" description="Reputation of the Manufacturer" exported="false">
            <value>
                [numeric exp here grounded on predicates declared above string for now]
            </value> <!-- numeric exp, string here -->
        </quality>

        <quality name="FinancialGain" description="Financial Gain" exported="false">
            <value>
                [numeric exp here grounded on predicates declared above string for now]
            </value>  <!-- numeric exp, string here -->
            <!-- No need for contribution links as they are represented in value tag -->
        </quality>

        <quality name="TotalValue" root="true" description="Overall Value" exported="false">
            <value>
                [numeric exp here grounded on predicates declared above string for now for example:]
                Reputation + FinancialGain
            </value>
        </quality>
    </qualities>


    <!-- Validation
            1. childGoal/childTask should be defined
            2. Some goals do not have any refinment (they are leaf level goals). We may need to issue just a warning.
            3. Pre/npr link can mention (a) preBox, (b) goal, (c) task, or (d) effect.
            4. subGoal and subTask must be defined somewhere
            5. AND refinmens have 2 or more children, OR refinments can have one or more.
            6. If root is true, episodeLength is mandatory. If missing throws warning and says episodeLength not given, default of 1 is assumed.
    -->
    <!-- Comments
            1. childGoal/childTask turn them into subGoal and subTask
            2. By default root = "false"?
            3. Change precondition to pre
    -->
    <goals>
        <goal name="ProductManufactured" root="true" description="Product Manufactured" episodeLength="1">
            <refinement type="AND">
                <childGoal ref="MaterialOrdered"/>
                <childGoal ref="ManufacturingCompleted"/>
            </refinement>
        </goal>

        <goal name="MaterialOrdered" description="Material Ordered">
            <refinement type="OR">
                <childTask ref="SourceDomestically"/>
                <childTask ref="SourceFromAbroad"/>
            </refinement>
        </goal>


        <goal name="ManufacturingCompleted" description="Manufacturing Completed">
            <pre>MaterialOrdered</pre>
            <refinement type="OR">
                <childTask ref="BuildInHouse"/>
                <childTask ref="AssignToSpecialists"/>
            </refinement>
        </goal>
    </goals>


    <!-- Validation
            1. Each task should be referenced by exactly one goal (warning).
            2. pre/npr origin must exist (error)
            3. Pre/npr link can mention (a) preBox, (b) goal, (c) task, or (d) effect.
            4. Content of turns true and turns false must exist in predicates (error).
    -->

    <!-- Comments
            1.We don't need contributes anymore. It is all in the formula in the qualities.
            2. Precedences / nprs can target goals, effects, and tasks
            3. default for effect is that it is satisfying, warning if it is missing.
            4. Error if probability is missing.
            5. For all elements, warning if description is missing.
    -->
    <tasks>
        <task name="SourceDomestically" description="Source materials from a domestic supplier">
            <pre>materialAvailable</pre>
            <effectGroup>
                <effect name="successDeliveredInTimeDom" satisfying="true" probability="0.75"
                        description="Successful">
                    <!-- can have pre/npr here, but none examples have it -->
                    <!-- can have turnsFalse here, but none examples have it-->
                </effect>
                <effect name="successDeliveredLateDom" satisfying="true" probability="0.20"
                        description="Successful">
                    <turnsTrue>deliveredLateDom</turnsTrue>
                </effect>
                <effect name="failureDeliveredDom" satisfying="false" probability="0.05"
                        description="Failure">
                    <turnsTrue>neverDeliveredDom</turnsTrue>
                </effect>
            </effectGroup>
        </task>

        <task name="SourceFromAbroad" description="Source materials from a foreign supplier">
            <effectGroup>
                <effect name="successDeliveredInTimeFrgn" satisfying="true" probability="0.50"
                        description="Successful">
                    <turnsTrue>deliveredInTimeFrgn</turnsTrue>
                </effect>
                <effect name="successDeliveredLateFrgn" satisfying="true" probability="0.35"
                        description="Successful">
                    <turnsTrue>deliveredLateFrgn</turnsTrue>
                </effect>
                <effect name="failureDeliveredFrgn" satisfying="false" probability="0.15"
                        description="Failure">
                    <turnsTrue>neverDeliveredFrgn</turnsTrue>
                </effect>
            </effectGroup>
        </task>

        <task name="BuildInHouse" description="Build the product in-house">
            <pre>hasManufacturingCapacity</pre>
            <effectGroup>
                <effect name="successInHGood" satisfying="true" probability="0.5"
                        description="Successful">
                    <turnsTrue>deliveredGoodQualityInH</turnsTrue>
                </effect>
                <effect name="successInHBad" satisfying="true" probability="0.5"
                        description="Successful">
                    <turnsTrue>deliveredBadQualityInH</turnsTrue>
                </effect>
            </effectGroup>
        </task>

        <task name="AssignToSpecialists" description="Assign product manufacturing to specialists">
            <npr>SourceFromAbroad</npr>
            <effectGroup>
                <effect name="successSpecGood" satisfying="true" probability="0.7"
                        description="Successful">
                    <turnsTrue>deliveredGoodQualitySpec</turnsTrue>
                </effect>
                <effect name="successSpecBad" satisfying="true" probability="0.3"
                        description="Successful">
                    <turnsTrue>deliveredBadQualitySpec</turnsTrue>
                </effect>
            </effectGroup>
        </task>
    </tasks>

</actor>